{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cazan documentation","text":"<p>Cazan's duty is to help you to build your games in browsers, using <code>&lt;canvas&gt;</code>.</p> <p>But it's not a simple API built on top of the Javascript DOM API. Cazan provides a drawing system, with FPS handling and optimization, audios and videos support, and lots of utilities more!</p> <p>Cazan is not alone! You can be improved by Cazanw. Cazanw is a subproject whose aim to speed up calculations, for example those for collisions, among others, thanks to WASM.</p>"},{"location":"#drawing-system","title":"Drawing system","text":"<p>The basic shapes are already available and implemented by Cazan (like Rectangle, Line, Circle,...), but you can use the API to build your own shapes.</p> <p>You can customize the styles of the shapes and even display images on the shapes that admit it.</p> <p>You don't have to focus on how to save your shapes for the next frame, because Cazan does it automatically.</p>"},{"location":"#fps-handling","title":"FPS handling","text":"<p>You can manually set a number of FPS for your game, but if the user's screen is not good enough for your game Cazan will automatically adapt the game to the user's screen.</p>"},{"location":"#multimedia-support","title":"Multimedia support","text":"<p>Cazan's Multimedia API helps you to include audios and videos in your game only in JavaScript! You don't have to include manually your videos and audios anymore!</p>"},{"location":"#utilities","title":"Utilities","text":"<p>Here some utilities provided with Cazan.</p>"},{"location":"#keyboard-events","title":"Keyboard events","text":"<p>You can add events on keyboard events simply with Cazan's Event API.</p>"},{"location":"#popups","title":"Popups","text":"<p>Cazan implements a popups system for simplifying the interactions between the user and the game. With only one line of code you can ask a question to the user or tell him about an error...</p>"},{"location":"#cazanw","title":"Cazanw","text":"<p>Info</p> <p>Cazanw isn't available yet.</p> <p>Cazanw will help you to make calculations faster than the classic JS way!</p>"},{"location":"get-started/","title":"Get started","text":""},{"location":"get-started/#installation","title":"Installation","text":"<p>Note</p> <p>Another system for installing + project management is in conception. This page will change in the future.</p> <p>1) Clone project <code>git clone https://github.com/AeliaDev/cazan.js.git</code></p> <p>2) Install dependencies <code>yarn</code></p> <p>3) Build assets <code>yarn run build</code></p> <p>4) Launch tests server <code>cd tests &amp;&amp; node server.js</code></p> <p>Tip</p> <p>We recommend for the moment to clone Cazan in your project folder (in <code>./vendor</code>)</p>"},{"location":"get-started/#project-creation","title":"Project creation","text":"<p>1) Create an HTML file (with the classic base structure)</p> <p>2) Create a <code>&lt;canvas&gt;</code> and put an id to it (for example 'game')</p> <p>3) Create a JavaScript file and include it into the HTML file (the script tag must have <code>type=\"module\"</code> in attribute)</p> <p>4) In the JS file, import Cazan: <code>import * as cazan from \"./path/to/cazan.js</code></p> <p>Tip</p> <p>We advise to use the non-minified bundled file in development and the minified one in production.</p> <p>Warning</p> <p>This kind of import needs a local server to work (you can use the vscode extension live server or using a local development server).</p> <p>5) Create the base of each Cazan game: app.js<pre><code>function runApp() {\n}\n\nwindow.addEventListener(\"load\", runApp);\n</code></pre></p> <p>Abstract</p> <p>We add an event listener on the 'load' event on the window to interact with the canvas after the page loading.</p> <p>Note</p> <p>In some cases, the usage of Cazan's APIs can lead to make <code>runApp()</code> to asynchronous.</p> <p>6) Setup Cazan and start coding! app.js<pre><code>function runApp() {\n    let game = cazan.setup(\"#yourCanvasId\", \"2d\")\n    game.setSize(600, 350)\n\n    let rectangle = new cazan.graphics.Rectangle(game, {x: 10, y: 10}, {x: 50, y: 50})\n\n    game.update()\n}\n</code></pre></p>"},{"location":"get-started/#sum-up","title":"Sum up!","text":"index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n\n    &lt;title&gt;Your game name&lt;/title&gt;\n    &lt;script src=\"/app.js\" type=\"module\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;canvas id=\"yourCanvasId\"&gt;&lt;/canvas&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> app.js<pre><code>import * as cazan from \"./path/to/cazan.js\"\n\nfunction runApp() {\n    let game = cazan.setup(\"#yourCanvasId\", \"2d\")\n    game.setSize(600, 350)\n\n    let rectangle = new cazan.shapes.Shape(game, {x: 10, y: 10}, {x: 50, y: 50})\n\n    game.update()\n}\n\nwindow.addEventListener(\"load\", runApp);\n</code></pre>"},{"location":"community/","title":"Community","text":"<p>Cazan is an open source project. We would appreciate if you contribute to it :).</p>"},{"location":"community/#main-contributors","title":"Main contributors","text":"<p>Made with contrib.rocks.</p>"},{"location":"community/#conduct","title":"Conduct","text":"<p>We except from our contributors to not be unpleasant to others and to respect them.</p>"},{"location":"community/#security","title":"Security","text":"<p>If you meet any issue, please report it on your GitHub issues (please watch if its already reported).</p>"},{"location":"community/licence/","title":"Cazan licence","text":"<pre><code>MIT License\n\nCopyright (c) 2024 AeliaDev &amp; cazan contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"events/","title":"Events","text":"<p>In this section you will learn how to use Cazan for event handling.</p>"},{"location":"events/keyboard/","title":"Keyboard events","text":"<p>In this page we'll use the <code>cazan.events.keyboard</code> namespace.</p>"},{"location":"events/keyboard/#demonstration","title":"Demonstration","text":"<p>Example</p> <p>There's a little example: <pre><code>keyboard.setKeyboardHandler({\n    on: 'keydown', //(1)!\n    shortcutCallback: (event) =&gt; event.key === 'ArrowLeft', //(2)!\n    callback: () =&gt; { //(3)!\n        myRect.setPosition({\n            x: myRect.getPosition().x - 10,\n            y: myRect.getPosition().y\n        })\n    }\n})\n</code></pre></p> <ol> <li>Define the type of the keyboard listener (<code>keydown</code> or <code>keyup</code>). By default, it's 'keydown'.</li> <li>That's here that you define the keys to press, so this function must return a boolean.</li> <li>The function that will be called if the keys are pressed.</li> </ol> <p>This example consists of moving of 10px on the left a rectangle when the left arrow is pressed.</p> <p>Warning</p> <p>If you want to use a shortcut with <code>ctrl</code>, you should put <code>(event.ctrlKey || event.metaKey)</code> for multiplatform compatibility.</p>"},{"location":"events/keyboard/#reference","title":"Reference","text":"<p><code>SetKeyboardHandlerInterface</code> is used for typing <code>keyboard.setKeyboardHandler()</code> params.</p> <pre><code>interface SetKeyboardHandlerInterface {\n    on?: string &amp; ('keyup' | 'keydown')\n    /**\n     * Define the key combination of the event here.\n     * More information on how to set custom keyboard shortcuts : https://stackoverflow.com/a/60279187/21402860\n     *\n     * ------------------------------------------------------------------------------------------\n     * N.B: this function needs only to return a boolean. You only need to set a condition in it.\n     *\n     * e.g: for ctrl+s\n     * ```js\n     * (event) =&gt; (event.ctrlKey || event.metaKey) &amp;&amp; event.key === 's'\n     * ```\n     *\n     * @param {KeyboardEvent} event\n     * @returns {boolean}\n     */\n    shortcutCallback: (event: KeyboardEvent) =&gt; boolean\n    /**\n     * The code to call when the event is detected.\n     */\n    callback: () =&gt; void\n}\n</code></pre>"},{"location":"events/popups/","title":"cazan popups","text":"<p>Cazan provides a system of popups to simplify I/O interactions with the user.</p>"},{"location":"events/popups/#using-the-eventsio-api","title":"Using the events.io API","text":"<p>You can use the cazan I/O API to use popups. We are using the <code>cazan.events.io</code> namespace in this section.</p>"},{"location":"events/popups/#ioshowmsg","title":"<code>io.showMsg()</code>","text":"<p>Use it when you want to tell to the user an important message, such as an announcement or an error, for example.</p> <pre><code>await io.showMsg({title: \"myGame\", msg: 'Unknown error', btnText: \"Ok\"})\n</code></pre>"},{"location":"events/popups/#iogetuserconfirm","title":"<code>io.getUserConfirm()</code>","text":"<p>Use it when you want a confirmation from the user to proceed to an action, etc...</p> <pre><code>let isUserReady = await io.getUserConfirm({title: \"myGame\", msg: 'Are you ready?'})\n</code></pre>"},{"location":"events/popups/#iogetuserinput","title":"<code>io.getUserInput()</code>","text":"<p>Use it when you want a text input from a user.</p> <pre><code>let username = await io.getUserInput({\n    title: \"myGame\",\n    msg: \"What's your name?\",\n    promptPlaceholder: \"John Doe, ...\"\n})\n</code></pre> <p>Info</p> <p>You can set a minimum and a maximum length to the input, by adding a <code>minLength</code> and/or a <code>maxLength</code>. The user won't be able to click on the confirm button if the input does not belong to [minLength; maxLength] (if not defined, it's [0;255])</p>"},{"location":"events/popups/#using-the-popup-api","title":"Using the Popup API","text":"<p>You can choose to use directly the Popup API. We are using the <code>cazan.utils</code> namespace here.</p> <pre><code>const popup = new utils.Popup({\n    title: \"myGame\",\n    msg: \"Hi, how are you?\",\n    btnText: 'Submit',\n    promptPlaceholder: \"fine, sad, ...\",\n    minLength: 2,\n    maxLength: 10,\n    type: \"prompt\"\n})\nlet userResponse = await popup.getResponse()\npopup.removePopup() //(1)!\n</code></pre> <ol> <li>Mandatory for remove the popup after the interaction.</li> </ol>"},{"location":"events/popups/#customizing-popups-styling","title":"Customizing popups styling","text":"<p>By default, cazan applies a default style on popups;</p> cazan popups' default style <p><pre><code>#cazan-popup{\nflex-direction: column; gap: 15px;\npadding: 10px;\nbackground-color: #fff; color: #000;\nmin-width: 200px;\nbox-shadow: 0.5px 0.5px 5px 1px #111;\nborder-radius: 1.5px;\nfont-family: monospace;\n}\n#cazan-popup h1 { margin: 0; }\n#cazan-popup p { margin: 0; text-align: center; }\n#cazan-popup div { display: flex; justify-content: space-around; }\n</code></pre> In fact, it appends a <code>&lt;style id=\"cazan-popup-style\" text=\"text/css\"&gt;</code> in the end of the <code>&lt;head&gt;</code> of your HTML document.</p> <p>Tip</p> <p>If you define manually this HTML tag and putting in custom CSS to customize the popups, Cazan won't override it, and your popup will be customized.</p> <p>Warning</p> <p>Attention: you can customize everything you want but if you want that it keeps working, don't customize <code>display</code>, <code>position</code> or <code>z-index</code>, these properties are needed because they will be used by Cazan.</p>"},{"location":"events/popups/#reference","title":"Reference","text":"<ul> <li> <p>I/O API: <code>IOEventInterface</code> is used for typing <code>io.showMsg()</code>, <code>io.getUserConfirm()</code> and <code>io.getUserInput()</code> params. <pre><code>interface IOEventInterface {\n    title: string\n    msg: string\n    btnText?: string\n\n    /** only for \"prompt\" mode */\n    promptPlaceholder?: string\n    maxLength?: number\n    minLength?: number\n}\n</code></pre></p> </li> <li> <p>Popup : this interface is used to create a new popup (thats the same as <code>IOEventInterface</code> but with a <code>type</code> added). <pre><code>interface PopupInterface extends IOEventInterface {\n    type: \"show\" | \"prompt\" | \"confirm\"\n}\n</code></pre></p> </li> </ul>"},{"location":"graphics/","title":"Graphics","text":"<p>What would a game library be without a system for draw shapes? Nothing, we presume. In this section you will discover how to use the Cazan graphics' API.</p>"},{"location":"graphics/#reference","title":"Reference","text":"<p>This is the parent class of each shape that you can draw with Cazan. Don't hesitate to extend it to create your own shapes.</p> <pre><code>class Graphic {\n    readonly id!: number\n\n    constructor(options: GraphicConstructorInterface) {}\n\n    draw(): void {}\n\n    hide(): void {}\n\n    setupStylesForDrawing(): void {}\n\n    private setDefaultStyles(): void {}\n\n    setStyles(styles: GenericGraphicStylesInterface): void {}\n\n    getStyles(): GenericGraphicStylesInterface | undefined {}\n\n    getId(): number {}\n\n    getGame(): Game {}\n\n    setPosition(options: {x?: number; y?: number}): Position {}\n\n    getPosition(): Position {}\n\n    setDimensions(options: {x?: number; y?: number}): void {}\n\n    getDimensions(): Dimensions {}\n\n    toggleDisplay(): void {}\n\n    getDisplayState(): boolean {}\n\n    /**\n     * This is an internal function made for cazanw plugin. You don't really have to use it, and even less when you don't have Cazanw configured on your project. \n     */\n    _exportToCw(): CwExport {}\n}\n</code></pre> <p>By the way, there's <code>GraphicContstructorInterface</code>.</p> <pre><code>interface GraphicConstructorInterface {\n    game: Game,\n    position: Position,\n    dimensions: Dimensions,\n    styles?: GenericGraphicStylesInterface,\n    toDisplay?: boolean\n}\n</code></pre> <p>Some shapes can handle images on them. If they do, they implement <code>ImageHandlingInterface</code>.</p> <pre><code>interface ImageHandlingInterface {\n    setImage(image: CanvasImageSource): void\n    getImage(): string | null\n    getImageSource(): string | number\n}\n</code></pre> <p>Shapes like <code>Circle</code> or <code>Ellipse</code> are curved shapes. So they implement <code>CurveInterface</code> and they have a <code>drawOptions: CurveDrawingOptionsInterface</code> in params.</p> <pre><code>interface CurveInterface {\n    setDrawingOptions(options: CurveDrawingOptionsInterface): void\n    getDrawingOptions(): CurveDrawingOptionsInterface\n}\n\ninterface CurveDrawingOptionsInterface {\n    startAngle: number\n    endAngle: number\n\n    /** for Circle only */\n    counterClockWise?: boolean\n\n    /** for Ellipse only */\n    rotation?: number\n}\n</code></pre>"},{"location":"graphics/circle/","title":"Circle","text":"<p>We'll use the <code>cazan.graphics</code> namespace here.</p>"},{"location":"graphics/circle/#demonstration","title":"Demonstration","text":"<p>Little example: <pre><code>let myCircle = new graphics.Circle({\n    game: game,\n    position: {x: 540, y: 100}, //(1)!\n    radius: 25 //(2)!\n})\n</code></pre></p> <ol> <li>The center of the circle.</li> <li>The radius of the circle.</li> </ol> <p>You can add an image if you want and decide to not display it now, like <code>Rectangle</code>.</p> <p>You can also customize the drawing options. For a circle, you can change the way of the drawing cursor and put a start  angle different from 0 rad and an end circle different from 2pi rad (the circle is not complete).</p>"},{"location":"graphics/circle/#reference","title":"Reference","text":"<p>For other further information, see the page about <code>Graphic</code>, <code>ImageHandlingInterface</code>, <code>CurveInterface</code> and <code>CurveDrawingOptionsInterface</code>.</p> <pre><code>class Circle extends Graphic implements CurveInterface, ImageHandlingInterface {\n    private image?: CanvasImageSource\n    private drawingOptions: CurveDrawingOptionsInterface\n\n    constructor(options: CircleConstructorInterface) {}\n\n    setRadius(radius: number): void {}\n\n    getRadius(): number {}\n}\n</code></pre> <p>Information about the constructor:</p> <pre><code>interface CircleConstructorInterface {\n    game: Game,\n    position: Position,\n    radius: number,\n    styles?: GenericGraphicStylesInterface,\n    srcImage?: string,\n    toDisplay?: boolean,\n    drawingOptions?: CurveDrawingOptionsInterface\n}\n</code></pre>"},{"location":"graphics/ellipse/","title":"Ellipse","text":"<p>We'll use the <code>cazan.graphics</code> namespace here.</p>"},{"location":"graphics/ellipse/#demonstration","title":"Demonstration","text":"<p>Little example: <pre><code>let myEllispe = new graphics.Ellipse({\n    game: game, \n    position: {x: 540, y: 100}, //(1)!\n    radiusX: 25, //(2)!\n    radiusY: 15, //(3)!\n})\n</code></pre></p> <ol> <li>The center of the ellipse.</li> <li>The radius of the x-axis of the circle.</li> <li>The radius of the y-axis of the circle.</li> </ol> <p>You can add an image if you want and decide to not display it now, like <code>Rectangle</code> or any other shape, you can customize  the drawing options. For an ellipse, you can change the rotation of the drawing cursor and put a start angle different from 0  rad and an end circle different from 2pi rad (the circle is not complete).</p>"},{"location":"graphics/ellipse/#reference","title":"Reference","text":"<p>For other further information, see the page about <code>Graphic</code>, <code>CurveInterface</code> and <code>CurveDrawingOptionsInterface</code>.</p> <pre><code>class Ellipse extends Graphic implements CurveInterface {\n    private drawingOptions: CurveDrawingOptionsInterface = {\n        startAngle: 0,\n        endAngle: Math.PI * 2,\n        rotation: Math.PI / 4\n    }\n\n    constructor(options: EllipseConstructorInterface) {}\n\n    setRadius(options: {x?: number, y?: number}): void {}\n\n    getRadius(): {x: number, y: number} {}\n}\n</code></pre> <p>Information about the constructor:</p> <pre><code>interface EllipseConstructorInterface {\n    game: Game,\n    position: Position,\n    radiusX: number,\n    radiusY: number,\n    styles?: GenericGraphicStylesInterface,\n    toDisplay?: boolean,\n    drawingOptions?: CurveDrawingOptionsInterface\n}\n</code></pre>"},{"location":"graphics/groups/","title":"Groups","text":"<p>Groups are set of many graphics put together in order to move them or display/hide them all at the same moment.</p> <p>We'll use the <code>cazan.graphics</code> namespace here.</p>"},{"location":"graphics/groups/#demonstration","title":"Demonstration","text":"<pre><code>let head = new Rectangle({\n    game: game,\n    position: {x: 0, y: 0},\n    dimensions: {width: 50, height: 50},\n    styles: {graphic: {color: \"rgba(255,165,0,1)\", type: \"fill\"}},\n    toDisplay: false //(1)!\n})\n\nlet body = new Rectangle({\n    game: game,\n    position: {x: 0, y: 50},\n    dimensions: {width: 50, height: 100},\n    styles: {graphic: {color: \"rgba(0,0,0,1)\",type: \"fill\"}},\n    toDisplay: false\n})\n\nlet man = new Group(\n    \"man\",\n    {x: 100, y: 100}, //(2)!\n    {\n        \"head\": head, //(3)!\n        \"body\": body\n    }\n)\n\nman.show() //(4)!\n</code></pre> <ol> <li>You don't need to show them immediately after their creation (otherwise they will be displayed in order of the canvas origin)</li> <li>This is the position of the group. It will be the origin of all graphics that belong to this group.</li> <li>Here put the graphics and name them.</li> <li>Don't forget to display the shapes after the initialisation! And you can use the Group properties already!</li> </ol> <p>This will create a kind of man (that have an orange head and a black suit).</p> <p>And there's how we can move the little man: <pre><code>man.setPosition({x: man.getPosition().x + 25})\n</code></pre></p>"},{"location":"graphics/groups/#reference","title":"Reference","text":"<pre><code>class Group {\n    protected graphicsRelativesPositions: Record&lt;string, Position&gt; = {}\n\n    constructor(\n        protected name: string,\n        protected position: Position,\n        protected graphics: Record&lt;string, Graphic&gt;\n    ) {}\n\n    show(): void {}\n\n    hide(): void {}\n\n    setPosition(newPosition: {x?: number, y?: number}): void {}\n\n    getPosition(): Position {}\n\n    setGraphicRelativePositions(graphicName: string, newPosition: Position): void {}\n\n    getGraphicsRelativePositions(): Record&lt;string, Position&gt; {}\n\n    setName(name: string): void {}\n\n    getName(): string {}\n\n    setGraphics(graphics: Record&lt;string, Graphic&gt;): void {}\n\n    addGraphic(newGraphic: {name: string, graphic: Graphic}): void {}\n\n    removeGraphic(graphicName: string): void {}\n\n    getGraphics(): Record&lt;string, Graphic&gt; {}\n\n    getGraphic(name: string): Graphic {}\n\n    private _registerRelativesPositions(graphic?: {name: string, graphic: Graphic}): void {}\n}\n</code></pre>"},{"location":"graphics/line/","title":"Line","text":"<p>We'll use the <code>cazan.graphics</code> namespace here.</p>"},{"location":"graphics/line/#demonstration","title":"Demonstration","text":"<p>There's how to create a line with Cazan. <pre><code>let myLine = new graphics.Line({\n    game: game, \n    firstPoint: {x: 10, y: 10},  //(1)! \n    secondPoint: {x: 50, y: 150}  //(2)!\n})\n</code></pre></p> <ol> <li>Position of the first point.</li> <li>Position of the second point.</li> </ol>"},{"location":"graphics/line/#reference","title":"Reference","text":"<p>For other further information, see the page about <code>Graphic</code>, the parent of <code>Line</code>.</p> <pre><code>class Line extends Graphic {\n    constructor(options: LineConstructorInterface) {}\n}\n</code></pre> <p>Information about the constructor:</p> <pre><code>interface LineConstructorInterface {\n    game: Game,\n    firstPoint: Position,\n    secondPoint: Position,\n    styles?: GenericGraphicStylesInterface,\n    toDisplay?: boolean\n}\n</code></pre>"},{"location":"graphics/rectangle/","title":"Rectangle","text":"<p>We'll use the <code>cazan.graphics</code> namespace here.</p>"},{"location":"graphics/rectangle/#demonstration","title":"Demonstration","text":"<p>Little example: <pre><code>let myRect = new graphics.Rectangle({\n    game: game, \n    position: {x: 10, y: 10}, \n    dimensions: {width: 50, height: 50},\n})\n</code></pre></p> <p>You can add an image if you want and decide to not display the element right now. <pre><code>let myRect = new graphics.Rectangle({\n    game: game, \n    position: {x: 10, y: 10}, \n    dimensions: {width: 50, height: 50},\n    srcImage: 'img.png',\n    toDisplay: false\n})\n\n// ...\n\nmyRect.draw() //(1)!\n</code></pre></p> <ol> <li>draw the rectangle</li> </ol>"},{"location":"graphics/rectangle/#reference","title":"Reference","text":"<p>For other further information, see the page about <code>Graphic</code> and <code>ImageHandlingInterface</code>.</p> <pre><code>class Rectangle extends Graphic implements ImageHandlingInterface {\n    private image?: CanvasImageSource\n\n    constructor(options: RectangleConstructorInterface) {}\n}\n</code></pre> <p>Information about the constructor:</p> <pre><code>interface RectangleConstructorInterface {\n    game: Game,\n    position: Position,\n    dimensions: Dimensions,\n    styles?: GenericGraphicStylesInterface,\n    srcImage?: string,\n    toDisplay?: boolean\n}\n</code></pre>"},{"location":"graphics/sprites/","title":"Sprites","text":"<p>Warning</p> <p>This feature isn't already tested well. It could evolve.</p>"},{"location":"graphics/sprites/#demonstration","title":"Demonstration","text":"<pre><code>let rectangle = new Rectangle({ /* .... */ })\nlet sprite = new Sprite(\n    rectangle, //(1)! \n    \"seq1\", //(2)!\n    {\n        \"seq1\": [ //(3)!\n            {image: \"img1.1\", time: 500},\n            {image: \"img1.2\", time: 1500}, //(4)!\n            {image: \"img1.3\", time: 500}\n        ],\n        \"seq2\": [\n            {image: \"img2.1\", time: 500},\n            {image: \"img2.2\", time: 500},\n            {image: \"img2.3\", time: 500}\n        ]\n    }\n)\n</code></pre> <ol> <li>The graphic that hosts the sprite.</li> <li>The current sequence. It's the name of the sequence that will be automatically be used by Cazan.</li> <li>Here define your different sequences of images.</li> <li>This image here will be displayed a bit longer than the other of its sequence.</li> </ol> <p>It creates a sprite on the <code>rectangle</code>. On this sprite there's two different sequences of three images each.</p> <p>If you want to change of sequence, just type:</p> <pre><code>sprite.changeSequence(\"seq2\")\n</code></pre> <p>About multiple sequences...</p> <p>We invented this system to help you to animate characters! You know, there's many steps to animate somebody walking, but with this set of many sequences, you can create a sequence of animations for each direction on only one sprite!</p> <pre><code>Example:\n````js\nlet player = new Rectangle({ /* .... */ })\nlet sprite = new Sprite(\n    player,\n    \"right\",\n    {\n        \"right\": [\n            {image: \"img1.1\", time: 500},\n            {image: \"img1.2\", time: 500},\n            {image: \"img1.3\", time: 500}\n        ],\n        \"left\": [\n            {image: \"img2.1\", time: 500},\n            {image: \"img2.2\", time: 500},\n            {image: \"img2.3\", time: 500}\n        ]\n        // ......\n    }\n)\n````\n</code></pre>"},{"location":"graphics/sprites/#reference","title":"Reference","text":"<pre><code>class Sprite {\n    currentImage = 0\n\n    /**\n     *\n     * @param rectangle\n     * @param currentSequence It must be the name of one of the sequences of the ``images`` argument.\n     * @param images It's an object that can contain multiple sequences of images.\n     */\n    constructor(\n        protected rectangle: Rectangle,\n        protected currentSequence: string,\n        protected images: Record&lt;string, SpriteImage[]&gt;\n    ) {}\n\n    changeSequence(newSequence: string): void {}\n\n    /**\n     * You can use this method to create new sequences.\n     */\n    setImageSequence(sequence: string, images: SpriteImage[]): void {}\n\n    getImageSequence(sequence: string): SpriteImage[] {}\n}\n</code></pre>"},{"location":"graphics/styling/","title":"Styling shapes","text":"<p>We'll use the <code>cazan.graphics</code> and the <code>cazan.styles</code> namespaces in this page.</p> <p>Bug</p> <p>This API might be bugging.</p>"},{"location":"graphics/styling/#categories-of-styling","title":"Categories of styling","text":"<p>There are three categories of styling:  - <code>graphic</code> for styling the general style of the element. It could be used for all graphic elements.  - <code>line</code> for styling shapes that uses lines to be drawn. It could be used on Circle, Ellipse and Line.  - <code>text</code> for styling texts. It could be used only on Text. </p>"},{"location":"graphics/styling/#graphic","title":"<code>graphic</code>","text":"<p>With the graphic styles you can configure the color and the type (<code>fill</code> or <code>stroke</code>) of the element.</p>"},{"location":"graphics/styling/#line","title":"<code>line</code>","text":"<p>With the line styles you can set the line's width, and its cap (<code>butt</code>, <code>round</code>, or <code>square</code>), join (<code>round</code>, <code>bevel</code>, or <code>miter</code>), miterLimit , dash (<code>[number, number]</code>), and dashOffset.</p> <p>You can use this styling on <code>Circle</code>, <code>Ellipse</code>, and of course on <code>Line</code>.</p>"},{"location":"graphics/styling/#text","title":"<code>text</code>","text":"<p>You can style texts with text styles. You can customize the color, the font, the textAlign (<code>start</code>, <code>end</code>, <code>left</code>, <code>right</code>, or <code>center</code>), the textBaseline (<code>top</code>, <code>hanging</code>, <code>middle</code>, <code>alphabetic</code>, <code>ideographic</code>, or <code>bottom</code>) and the direction (<code>ltr</code>, <code>rtl</code>, <code>inherit</code>) of the text.</p>"},{"location":"graphics/styling/#styling-an-element","title":"Styling an element","text":"<p>You just have to define the style on an element. Like in this example:</p> <pre><code>let myRect = new graphics.Rectangle({\n    // ... basic rectangle implementation\n    styles: {\n        grahic: {\n            type: 'fill',\n            color: '#000'\n        }\n    }\n})\n</code></pre> <p>And another with a line:</p> <pre><code>let myLine = new graphics.Line({\n    // ... basic line implementation\n    styles: {\n        grahic: {\n            type: 'fill',\n            color: '#000'\n        },\n        line: {\n            width: 20\n        }\n    }\n})\n</code></pre> <p>And this example for a text:</p> <pre><code>let myText = new graphics.Text({\n    // ... basic line implementation\n    styles: {\n        graphic: {color: \"#000\", type: \"fill\"},\n        text: {color: \"#fff\"}\n    }\n})\n</code></pre> <p>Note</p> <p>For texts, you must provide a different color for the text and for the background of the text. That's better for reading it.</p> <p>Tip</p> <p>If the styles aren't set on an element, Cazan will use the latest created element style. But attention: you have to style the first element!</p>"},{"location":"graphics/styling/#reference","title":"Reference","text":"<p>These are the functions and interfaces that Cazan uses to styling elements. But you might need to use them someday so, here they are!</p>"},{"location":"graphics/styling/#functions","title":"Functions","text":""},{"location":"graphics/styling/#setfillgame-rgba","title":"setFill(game, rgba)","text":"<p>This function sets the drawing color to fill shapes as the <code>rgba</code> param says.</p> <p>Warning</p> <p>You must specify <code>rgba</code> param like this: <code>styles.setFill(game, \"rgba(X,X,X,X)\")</code></p>"},{"location":"graphics/styling/#setstrokegame-rgba","title":"setStroke(game, rgba)","text":"<p>Same thing as <code>styles.setFill()</code> but it's for stroke.</p>"},{"location":"graphics/styling/#setlinestylegame-options","title":"setLineStyle(game, options)","text":"<p>Customize the drawing line options.</p> <p>Note: <code>options</code>'s type is <code>LineStyleInterface</code>.</p>"},{"location":"graphics/styling/#settextstylegame-options","title":"setTextStyle(game, options)","text":"<p>Customize the text drawing options.</p> <p>Note: <code>options</code>'s type is <code>TextStyleInterface</code>.</p>"},{"location":"graphics/styling/#interfaces","title":"Interfaces","text":""},{"location":"graphics/styling/#linestyleinterface","title":"LineStyleInterface","text":"<pre><code>interface LineStyleInterface {\n    width?: number\n    cap?: \"butt\" | \"round\" | \"square\"\n    join?: \"round\" | \"bevel\" | \"miter\"\n    miterLimit?: number\n    dash?: [number, number]\n    dashOffset?: number\n}\n</code></pre>"},{"location":"graphics/styling/#textstyleinterface","title":"TextStyleInterface","text":"<pre><code>interface TextStyleInterface {\n    color: string\n    /**\n     * Use `TextStyleInterface.font` as the CSS property `font`.\n     */\n    font?: string\n    textAlign?: \"start\" | \"end\" | \"left\" | \"right\" | \"center\"\n    textBaseline?: \"top\" | \"hanging\" | \"middle\" | \"alphabetic\" | \"ideographic\" | \"bottom\"\n    direction?: \"ltr\" | \"rtl\" | \"inherit\"\n}\n</code></pre>"},{"location":"graphics/styling/#graphicstylesinterface","title":"GraphicStylesInterface","text":"<pre><code>interface GraphicStylesInterface {\n    color: string\n    type: 'fill' | 'stroke'\n}\n</code></pre>"},{"location":"graphics/styling/#genericgraphicstylesinterface","title":"GenericGraphicStylesInterface","text":"<pre><code>interface GenericGraphicStylesInterface {\n    graphic: GraphicStylesInterface\n    /**\n     * only for shapes drawn by lines\n     */\n    line: LineStyleInterface\n    /**\n     * only for Text\n     */\n    text: TextStyleInterface\n}\n</code></pre>"},{"location":"graphics/text/","title":"Text","text":"<p>We'll use the <code>cazan.graphics</code> namespace here.</p>"},{"location":"graphics/text/#demonstration","title":"Demonstration","text":"<p>Little example: <pre><code>let myText = new graphics.Text({\n    game: game,\n    position: {x: 20, y: 20},\n    dimensions: {width: 100, height: 15},\n    text: {  //(1)!\n        text: \"Hello, World!\",\n        type: \"fill\",\n        x: 5, y: 5  //(2)!\n    },\n    styles: {\n        graphic: {color: \"#000\", type: \"fill\"},\n        text: {color: \"#fff\"}  //(3)!\n    }\n})\n</code></pre></p> <ol> <li>You can specify data about the text here.</li> <li>The <code>x</code> and <code>y</code> are calculated from the top left corner of the rectangle drawn. By default, they are set to <code>x = y = 0</code>.</li> <li>On this element you should put a different draw color for the text and for the rectangle (you want that the user can read it, right?). You will have the documentation about Styling on the next page.</li> </ol> <p>Note</p> <p><code>Text</code> is a kind of <code>Rectangle</code> that can display a text on it. So you can use it as a normal graphic element. </p>"},{"location":"graphics/text/#reference","title":"Reference","text":"<p>For other further information, see the page about <code>Graphic</code> and <code>Rectangle</code>.</p> <pre><code>class Text extends Rectangle {\n    protected text: TextInterface\n\n    constructor(options: TextConstructorInterface) {}\n\n    /**\n     * This setter and the next getter are for editing/getting the text but not the others settings of the text interface. \n     * @param text\n     */\n    setText(text: string): void {}\n\n    getText(): string {}\n\n    /**\n     * This setter and the next getter are for editing/getting the text interface in full. \n     * @param text\n     */\n    setTextInterface(text: UpdateTextInterface): void {}\n\n    getTextInterface(): TextInterface {}\n}\n</code></pre> <p>Information about the constructor:</p> <pre><code>interface TextConstructorInterface {\n    game: Game,\n    position: Position,\n    dimensions: Dimensions,\n    text: TextInterface,\n    styles?: GenericGraphicStylesInterface,\n    toDisplay?: boolean\n}\n</code></pre> <p>TextInterface and UpdateTextInterface:</p> <pre><code>interface TextInterface {\n    text: string\n    type: \"fill\" | \"stroke\"\n    x?: number\n    y?: number\n    maxWidth?: number\n}\n\ninterface UpdateTextInterface {\n    text?: string\n    type?: \"fill\" | \"stroke\"\n    x?: number\n    y?: number\n    maxWidth?: number\n}\n</code></pre>"},{"location":"multimedia/","title":"Multimedia","text":"<p>Cazan brings with it a Multimedia API, here to help you to add sounds and videos in your games. You will learn how to use this API in this section.</p>"},{"location":"multimedia/#reference","title":"Reference","text":"<p>There's the references of <code>Multimedia</code>. <code>Audio</code> and <code>Video</code> are children of this class so these methods can be used for them.</p> <pre><code>class Multimedia {\n    constructor(\n        protected id: string,\n        protected media: HTMLAudioElement | HTMLVideoElement,\n        protected sources: string[],\n    ) {}\n\n    /**\n     * Update sources.\n     * @param sources\n     */\n    setSources(sources: string[]): void {}\n\n    /**\n     * Returns the current sources\n     */\n    getSources(): string[] {}\n\n    /**\n     * Plays the media. (Continues from where it left off if paused)\n     */\n    play(): void {}\n\n    /**\n     * Pauses the media.\n     */\n    pause(): void {}\n\n    /**\n     * Stops the media. (Starts from the beginning if played again)\n     */\n    stop(): void {}\n\n    /**\n     * Sets the volume of the media.\n     * @param {number} volume\n     */\n    setVolume(volume: number): void {}\n\n    /**\n     * Gets the volume of the media.\n     */\n    getVolume(): number {}\n\n    /**\n     * Sets if the media should loop or not.\n     * @param {boolean} loop\n     */\n    setLoop(loop: boolean): void {}\n\n    /**\n     * Gets if the media is looping or not.\n     */\n    getLoop(): boolean {}\n\n    /**\n     * Sets if the media is muted or not.\n     * @param {boolean} muted\n     */\n    setMuted(muted: boolean): void {}\n\n    /**\n     * Gets if the media is muted or not.\n     */\n    getMuted(): boolean {}\n\n    /**\n     * Sets the playback rate of the media.\n     * @param {number} playbackRate\n     */\n    setPlaybackRate(playbackRate: number): void {}\n\n    /**\n     * Gets the playback rate of the media.\n     */\n    getPlaybackRate(): number {}\n\n    /**\n     * Sets the preload of the media.\n     * @param {\"none\" | \"metadata\" | \"auto\" | \"\"} preload\n     */\n    setPreload(preload: \"none\" | \"metadata\" | \"auto\" | \"\"): void {}\n\n    /**\n     * Gets the preload of the media.\n     */\n    getPreload(): \"none\" | \"metadata\" | \"auto\" | \"\" {}\n\n    /**\n     * Sets if the media should play automatically or not.\n     * @param {boolean} autoplay\n     */\n    setAutoplay(autoplay: boolean): void {}\n\n    /**\n     * Gets if the media should play automatically or not.\n     */\n    getAutoplay(): boolean {}\n\n    /**\n     * Sets the current time of the media.\n     * @param {number} currentTime\n     */\n    setCurrentTime(currentTime: number): void {}\n\n    /**\n     * Gets the current time of the media.\n     */\n    getCurrentTime(): number {}\n\n    /**\n     * Sets the default muted state of the media.\n     * @param {boolean} defaultMuted\n     */\n    setDefaultMuted(defaultMuted: boolean): void {}\n\n    /**\n     * Gets the default muted state of the media.\n     */\n    getDefaultMuted(): boolean {}\n\n    /**\n     * Sets the default playback rate of the media.\n     * @param {number} defaultPlaybackRate\n     */\n    setDefaultPlaybackRate(defaultPlaybackRate: number): void {}\n\n    /**\n     * Gets the default playback rate of the media.\n     */\n    getDefaultPlaybackRate(): number {}\n\n    /**\n     * Sets if the media should be prevented from downloading.\n     * @param {boolean} disableRemotePlayback\n     */\n    setDisableRemotePlayback(disableRemotePlayback: boolean): void {}\n\n    /**\n     * Gets if the media should be prevented from downloading.\n     */\n    getDisableRemotePlayback(): boolean {}\n\n    /**\n     * Gets the duration of the media.\n     */\n    getDuration(): number {}\n\n    /**\n     * Gets if the media has ended or not.\n     */\n    getEnded(): boolean {}\n\n    /**\n     * Gets if an error occurred while loading the media.\n     */\n    getError(): MediaError {}\n}\n</code></pre>"},{"location":"multimedia/audio/","title":"Audio","text":"<p>There's how to use cazan assets' API for audios. We'll use the <code>cazan.multimedia</code> namespace here.</p>"},{"location":"multimedia/audio/#demonstration","title":"Demonstration","text":"<p>Little example: <pre><code>let myMusic = new assets.Audio(\n    [\"audio.mp3\"] //(1)!\n)\nmyMusic.play()\n</code></pre></p> <ol> <li>Here put the paths to the sources of the audio. This may be useful for cross-browser compatibility.</li> </ol> <p>This will create a <code>&lt;div id=\"cazan-audio-tracks\"&gt;</code> at the end of your body tag in your HTML page. In this div cazan will add for each audio a <code>&lt;audio id=\"cazan-audio-track-{id}&gt;</code> and in each of them there will be as <code>&lt;source&gt;</code> as required.</p> <p>That's it.</p>"},{"location":"multimedia/audio/#reference","title":"Reference","text":"<p>For other information, see the page about <code>Multimedia</code>.</p> <pre><code>class Audio extends Multimedia {\n    /**\n     * @param {string[]} sources The different sources of the audio file. This may be useful for cross-browser compatibility.\n     */\n    constructor(sources: string[]) {}\n}\n</code></pre>"},{"location":"multimedia/video/","title":"Video","text":"<p>There's how to use cazan assets' API for videos. We'll use the <code>cazan.multimedia</code> and the <code>cazan.graphics</code> namespaces here.</p>"},{"location":"multimedia/video/#demonstration","title":"Demonstration","text":"<p>Little example: <pre><code>let screen = new graphics.Rectangle({ /* ... */}) //(1)!\nlet video = new assets.Video(screen, [\"video.mp4\"]) //(2)!\n\nvideo.play()\nvideo.setLoop(true)\n</code></pre></p> <ol> <li>The screen here is just the rectangle element that will display the video.</li> <li>Here put the paths to the sources of the video. This may be useful for cross-browser compatibility.</li> </ol> <p>This will create a <code>&lt;div id=\"cazan-videos-container\"&gt;</code> at the end of your body tag in your HTML page. In this div cazan will add for each audio a <code>&lt;video id=\"cazan-video-{id}&gt;</code> and in each of them there will be as <code>&lt;source&gt;</code> as required.</p> <p>The <code>Rectangle</code>'s duty is to display the video. In fact, the video changes of current image each screen refreshing, so Cazan gets the current image of the video to put it on the shape.</p>"},{"location":"multimedia/video/#reference","title":"Reference","text":"<p>For other information, see the page about <code>Multimedia</code>.</p> <pre><code>class Video extends Multimedia {\n    /**\n     * @param rectangle\n     * @param {string[]} sources The different sources of the audio file. This may be useful for cross-browser compatibility.\n     */\n    constructor(protected rectangle: Rectangle, sources: string[]) {}\n\n    /**\n     * You don't really need to use it. It's the function that permits to change of image on each frame.\n     */\n    process() {}\n}\n</code></pre>"},{"location":"reference/","title":"Reference","text":"<p>On this part of the documentation there will be the complete reference about Cazan's APIs and utils.</p> <p>Info</p> <p>This part of the website is under construction.</p>"},{"location":"reference/general/config/","title":"Configuration","text":"<p>The configuration file of a project permits to tell Cazan to do things that you want to be done, to specify which plugins do you use or sign your app.</p> <p>Warning</p> <p>This is only a prototype yet. Things could evolve.</p>"},{"location":"reference/general/config/#app-data","title":"App data","text":""},{"location":"reference/general/config/#name","title":"name","text":"<p>The name of the game.</p>"},{"location":"reference/general/config/#version","title":"version","text":"<p>The version of your game that the user actually uses.</p>"},{"location":"reference/general/config/#author","title":"author","text":"<p>The name of the developers of the game.</p>"},{"location":"reference/general/config/#app-settings","title":"App settings","text":""},{"location":"reference/general/config/#useautoplayformultimedia-optional","title":"useAutoplayForMultimedia (optional)","text":"<p>If your app needs to play audios or videos automatically (after the load of the page), you need to enable this setting.</p> <p>Some browsers need permissions to do that, like Mozilla Firefox and derivatives.</p>"},{"location":"reference/general/config/#plugins-optional","title":"plugins (optional)","text":"<p>Contains the list of plugins used, on this format:</p> <ul> <li> <p>name</p> </li> <li> <p>version (optional, required if the plugin is available for everyone)</p> </li> <li> <p>path (optional, required if it's a non-published or custom plugin)</p> </li> </ul>"},{"location":"reference/general/game/","title":"Game","text":""},{"location":"reference/general/game/#class","title":"Class","text":""},{"location":"reference/general/game/#game_1","title":"<code>Game</code>","text":""},{"location":"reference/general/game/#constructorctx-crenderingcontext-canvas-htmlcanvaselement-fps-number-100-config-config","title":"<code>constructor(ctx: CRenderingContext, canvas: HTMLCanvasElement, fps: number = 100, config: Config)</code>","text":"<p>Creates a new instance of <code>Game</code>.</p> <ul> <li> <p><code>ctx</code>: CRenderingContext, it's the canvas context.</p> </li> <li> <p><code>canvas</code>: it's the HTML element of the canvas.</p> </li> <li> <p><code>fps</code>: it's the default amount of fps.</p> </li> <li> <p><code>config</code>: it's the configuration of the project.</p> </li> </ul>"},{"location":"reference/general/game/#setsizewidth-number-height-number-void","title":"<code>setSize(width: number, height: number): void</code>","text":"<p>Set the dimensions of the canvas.</p>"},{"location":"reference/general/game/#getsize-width-number-height-number","title":"<code>getSize(): {width: number, height: number}</code>","text":"<p>Returns the size of the canvas.</p>"},{"location":"reference/general/game/#getcanvas-htmlcanvaselement","title":"<code>getCanvas(): HTMLCanvasElement</code>","text":"<p>Returns the canvas element.</p>"},{"location":"reference/general/game/#getctx-crenderingcontext","title":"<code>getCtx(): CRenderingContext</code>","text":"<p>Returns the context.</p>"},{"location":"reference/general/game/#getconfig-config","title":"<code>getConfig(): Config</code>","text":"<p>Returns the configuration.</p>"},{"location":"reference/general/game/#clearcanvas-void","title":"<code>clearCanvas(): void</code>","text":"<p>Clear the canvas.</p>"},{"location":"reference/general/game/#update-void","title":"<code>update(): void</code>","text":"<p>Update frames.</p>"},{"location":"reference/general/game/#draw-void","title":"<code>draw(): void</code>","text":"<p>Draw graphics.</p>"},{"location":"reference/general/game/#registergraphicgraphics-graphic-graphic-void","title":"<code>registerGraphic(graphics: Graphic | (Graphic)[]): void</code>","text":"<p>Register shapes in the shapes list for frame updating</p> <p>Note</p> <p>If an element isn't registered, it won't be actualized on the next frame updating.</p> <p>Note</p> <p>The graphics created with the graphic API from Cazan are registred automatically.</p>"},{"location":"reference/general/game/#unregistergraphicgraphicid-number-void","title":"<code>unregisterGraphic(graphicId: number): void</code>","text":"<p>Use it when you're sure that you don't need this shape anymore. If you just want to hide it prefer <code>element.hide()</code>.</p> <p>Warning</p> <p>This method will remove the shape from the shapes to redraw at each frame. Be sure before unregister one.</p>"},{"location":"reference/general/game/#getgraphics-graphic-null","title":"<code>getGraphics(): (Graphic | null)[]</code>","text":"<p>Returns the list of current graphics to draw.</p>"},{"location":"reference/general/game/#setfpsnewfps-number-void","title":"<code>setFps(newFps: number): void</code>","text":"<p>Set a new FPS.</p>"},{"location":"reference/general/game/#getcurrentfps-number","title":"<code>getCurrentFps(): number</code>","text":"<p>Returns the current FPS.</p>"},{"location":"reference/general/game/#async-getscreenrefreshrate-promisenumber","title":"<code>async getScreenRefreshRate(): Promise&lt;number&gt;</code>","text":"<p>Returns the user's screen refresh rate.</p>"},{"location":"reference/general/setup/","title":"Setup","text":""},{"location":"reference/general/setup/#function","title":"Function","text":""},{"location":"reference/general/setup/#setupcanvasselector-string-context-string-fps-number-promisegame-contextnotfoundexception","title":"<code>setup(canvasSelector: string, context: string, fps?: number): Promise&lt;Game | ContextNotFoundException&gt;</code>","text":"<p>Generates a <code>Game</code> entity and fetch the configuration file to set up Cazan.</p> <p>You must provide a:</p> <ul> <li> <p><code>canvasSelector</code>: string, it's the query selector of the canvas.</p> </li> <li> <p><code>context</code>: it serves to define which context your game will use (e.g: \"2d\", by the way it's the only context   available yet)</p> </li> <li> <p><code>fps</code>: number (optional)</p> </li> </ul> <p>It will return the <code>Game</code> instance created.</p>"},{"location":"reference/graphics/other-utils/","title":"Other utils","text":""},{"location":"reference/graphics/other-utils/#classes","title":"Classes","text":""},{"location":"reference/graphics/other-utils/#text","title":"<code>Text</code>","text":"<p><code>Text</code> extends <code>Rectangle</code>, you can move it like all other graphic elements.</p>"},{"location":"reference/graphics/other-utils/#constructoroptions-textconstructorinterface","title":"<code>constructor(options: TextConstructorInterface)</code>","text":"<p>Creates a new <code>Text</code> object.</p>"},{"location":"reference/graphics/other-utils/#drawnotmandatory-boolean-false","title":"<code>draw(notMandatory: boolean = false)</code>","text":"<p>Cf. graphics <code>draw</code> method.</p>"},{"location":"reference/graphics/other-utils/#settexttext-string-void","title":"<code>setText(text: string): void</code>","text":"<p>Change the text to display.</p>"},{"location":"reference/graphics/other-utils/#gettext-string","title":"<code>getText(): string</code>","text":"<p>Returns the current text.</p>"},{"location":"reference/graphics/other-utils/#settextinterfacetext-updatetextinterface-void","title":"<code>setTextInterface(text: UpdateTextInterface): void</code>","text":"<p>Change text writing params.</p>"},{"location":"reference/graphics/other-utils/#gettextinterface-textinterface","title":"<code>getTextInterface(): TextInterface</code>","text":"<p>Returns the current text writing params.</p>"},{"location":"reference/graphics/other-utils/#sprite","title":"<code>Sprite</code>","text":"<p>Bug</p> <p>Not finished yet. </p>"},{"location":"reference/graphics/other-utils/#group","title":"<code>Group</code>","text":""},{"location":"reference/graphics/other-utils/#constructorname-string-position-position-graphics-recordstring-graphic","title":"<code>constructor(name: string, position: Position, graphics: Record&lt;string, Graphic&gt;)</code>","text":"<p>Creates a new instance of <code>Group</code>.</p> <p>Please note that the <code>position</code> argument is the position of the group. Consider it as the origin for all shapes  included. Furthermore, the positions of all the shapes included are relative to this point.</p> <p>The shapes are contained in an object, and you have to give a name/key for each of them.</p>"},{"location":"reference/graphics/other-utils/#show-void","title":"<code>show(): void</code>","text":"<p>Displays all contained shapes at the same time.</p>"},{"location":"reference/graphics/other-utils/#hide-void","title":"<code>hide(): void</code>","text":"<p>Hides all contained shapes at the same time.</p>"},{"location":"reference/graphics/other-utils/#setpositionnewposition-x-number-y-number-void","title":"<code>setPosition(newPosition: {x?: number, y?: number}): void</code>","text":"<p>Change the position of the group, so it moves all the shapes at the same time.</p>"},{"location":"reference/graphics/other-utils/#getposition-position","title":"<code>getPosition(): Position</code>","text":"<p>Returns the group's position.</p>"},{"location":"reference/graphics/other-utils/#setgraphicrelativepositionsgraphicname-string-newposition-position","title":"<code>setGraphicRelativePositions(graphicName: string, newPosition: Position)</code>","text":"<p>Changes a graphic's relative position by its name/key. It will change the position of the graphic in relation to the  group's position.</p>"},{"location":"reference/graphics/other-utils/#getgraphicsrelativepositiongraphicname-string-position","title":"<code>getGraphicsRelativePosition(graphicName: string): Position</code>","text":"<p>Get a graphic's relative positions.</p>"},{"location":"reference/graphics/other-utils/#getgraphicsrelativepositions-recordstring-position","title":"<code>getGraphicsRelativePositions(): Record&lt;string, Position&gt;</code>","text":"<p>Get all relatives positions.</p>"},{"location":"reference/graphics/other-utils/#setnamename-string","title":"<code>setName(name: string)</code>","text":"<p>Changes the group's name.</p>"},{"location":"reference/graphics/other-utils/#getname-string","title":"<code>getName(): string</code>","text":"<p>Returns the group's name.</p>"},{"location":"reference/graphics/other-utils/#setgraphicsgraphics-recordstring-graphic-void","title":"<code>setGraphics(graphics: Record&lt;string, Graphic&gt;): void</code>","text":"<p>Change the set of shapes.</p>"},{"location":"reference/graphics/other-utils/#addgraphicnewgraphic-name-string-graphic-graphic-void","title":"<code>addGraphic(newGraphic: {name: string, graphic: Graphic}): void</code>","text":"<p>Add a shape in the group.</p>"},{"location":"reference/graphics/other-utils/#removegraphicgraphicname-string-void","title":"<code>removeGraphic(graphicName: string): void</code>","text":"<p>Remove a shape from the group.</p>"},{"location":"reference/graphics/other-utils/#getgraphics-recordstring-graphic","title":"<code>getGraphics(): Record&lt;string, Graphic&gt;</code>","text":"<p>Get the shape set.</p>"},{"location":"reference/graphics/other-utils/#getgraphicname-string-graphic","title":"<code>getGraphic(name: string): Graphic</code>","text":"<p>Get a specific graphic.</p>"},{"location":"reference/graphics/other-utils/#_registerrelativespositionsgraphic-name-string-graphic-graphic-void-private","title":"<code>_registerRelativesPositions(graphic?: {name: string, graphic: Graphic}): void</code> (private)","text":"<p>Save relatives position of recently added shapes before the first movement.</p>"},{"location":"reference/graphics/other-utils/#functions","title":"Functions","text":""},{"location":"reference/graphics/other-utils/#textmeasurementgame-game-text-string-textmetrics","title":"<code>textMeasurement(game: Game, text: string): TextMetrics</code>","text":"<p>Measure text.</p>"},{"location":"reference/graphics/other-utils/#interfaces","title":"Interfaces","text":""},{"location":"reference/graphics/other-utils/#textconstructorinterface","title":"<code>TextConstructorInterface</code>","text":"<ul> <li><code>game</code>: Game</li> <li><code>position</code>: Position</li> <li><code>dimensions</code>: Dimensions</li> <li><code>text</code>: TextInterface</li> <li><code>styles</code>: GenericGraphicStylesInterface (optional)</li> <li><code>toDisplay</code>: boolean (optional)</li> </ul>"},{"location":"reference/graphics/other-utils/#textinterface","title":"<code>TextInterface</code>","text":"<ul> <li><code>text</code>: string</li> <li><code>type</code>: \"fill\" | \"stroke\"</li> <li><code>x</code>: number (optional)</li> <li><code>y</code>: number (optional)</li> <li><code>maxWidth</code>: number (optional)</li> </ul>"},{"location":"reference/graphics/other-utils/#updatetextinterface","title":"<code>UpdateTextInterface</code>","text":"<ul> <li><code>text</code>: string (optional)</li> <li><code>type</code>: \"fill\" | \"stroke\" (optional)</li> <li><code>x</code>: number (optional)</li> <li><code>y</code>: number (optional)</li> <li><code>maxWidth</code>: number (optional)</li> </ul>"},{"location":"reference/graphics/other-utils/#spriteimage","title":"<code>SpriteImage</code>","text":"<ul> <li><code>image</code>: CanvasImageSource | string</li> <li><code>imgHash</code>: string, mandatory if Cazanw (or other plugin that need it) is used, it's the hash that permits to this  plugin to identify the images (optional)</li> <li><code>time</code>: number, in milliseconds</li> </ul>"},{"location":"reference/graphics/shapes/","title":"Shapes","text":""},{"location":"reference/graphics/shapes/#classes","title":"Classes","text":""},{"location":"reference/graphics/shapes/#graphic","title":"<code>Graphic</code>","text":""},{"location":"reference/graphics/shapes/#constructoroptions-graphicconstructorinterface","title":"<code>constructor(options: GraphicConstructorInterface)</code>","text":"<p>Creates a new Graphic instance.</p> <p>Info</p> <p>All other classes on this page are extending this class. So every method of <code>Graphic</code> can be used on them to  (except <code>private</code> method).</p>"},{"location":"reference/graphics/shapes/#drawnotmandatory-boolean-void","title":"<code>draw(notMandatory?: boolean): void</code>","text":"<p>Draw the shape, in this function you must put the instructions to draw your shape if you want to create a custom shape.</p>"},{"location":"reference/graphics/shapes/#destroy-void","title":"<code>destroy(): void</code>","text":"<p>Destroy the shape. It unregisters the shape from the shapes to draw on each frame so please take care of what you're  doing. </p>"},{"location":"reference/graphics/shapes/#setupstylesfordrawing-void","title":"<code>setupStylesForDrawing(): void</code>","text":"<p>Sets up the drawing styles.</p>"},{"location":"reference/graphics/shapes/#setdefaultstyles-void-private","title":"<code>setDefaultStyles(): void</code> (private)","text":"<p>Sets up default styles. Used to set up params that weren't set by the game developer.</p>"},{"location":"reference/graphics/shapes/#setstylesstyles-genericgraphicstylesinterface-void","title":"<code>setStyles(styles: GenericGraphicStylesInterface): void</code>","text":"<p>Set the styles.</p>"},{"location":"reference/graphics/shapes/#getstyles-genericgraphicstylesinterface","title":"<code>getStyles(): GenericGraphicStylesInterface</code>","text":"<p>Returns the current style.</p>"},{"location":"reference/graphics/shapes/#getid-number","title":"<code>getId(): number</code>","text":"<p>Returns the graphic's id.</p>"},{"location":"reference/graphics/shapes/#getgame-game","title":"<code>getGame(): Game</code>","text":"<p>Returns the graphic's game.</p>"},{"location":"reference/graphics/shapes/#setpositionoptions-x-number-y-number-void","title":"<code>setPosition(options: {x?: number; y?: number}): void</code>","text":"<p>Set the position of the graphic.</p>"},{"location":"reference/graphics/shapes/#getposition-position","title":"<code>getPosition(): Position</code>","text":"<p>Returns the position of the graphic.</p>"},{"location":"reference/graphics/shapes/#setdimensionsoptions-width-number-height-number-void","title":"<code>setDimensions(options: {width?: number; height?: number}): void</code>","text":"<p>Set the new dimensions of the graphic.</p>"},{"location":"reference/graphics/shapes/#getdimensions-dimensions","title":"<code>getDimensions(): Dimensions</code>","text":"<p>Returns the dimensions of the graphic.</p>"},{"location":"reference/graphics/shapes/#show-void","title":"<code>show(): void</code>","text":"<p>Displays the shape. In reality, it tells Cazan that he has to draw the shape on the next frame. </p>"},{"location":"reference/graphics/shapes/#hide-void","title":"<code>hide(): void</code>","text":"<p>Hides the shape. In reality, it tells Cazan that he mustn't to draw the shape on the next frame.</p>"},{"location":"reference/graphics/shapes/#toggledisplay-void","title":"<code>toggleDisplay(): void</code>","text":"<p>If the graphic was already displayed, hide it. In the other case, if the shape was hided, display it.</p>"},{"location":"reference/graphics/shapes/#getdisplaystate-boolean","title":"<code>getDisplayState(): boolean</code>","text":"<p>Returns <code>true</code> if the graphic was displayed, <code>false</code> otherwise.</p>"},{"location":"reference/graphics/shapes/#_exporttocw-cwexport","title":"<code>_exportToCw(): CwExport</code>","text":"<p>This is an internal function made for Cazanw plugin.</p>"},{"location":"reference/graphics/shapes/#circle","title":"<code>Circle</code>","text":"<p><code>Circle</code> implements <code>CurveInterface</code> and <code>ImageHandlingInterface</code>.</p>"},{"location":"reference/graphics/shapes/#constructoroptions-circleconstructorinterface","title":"<code>constructor(options: CircleConstructorInterface)</code>","text":"<p>Creates a new instance of <code>Circle</code>.</p>"},{"location":"reference/graphics/shapes/#setradiusradius-number-void","title":"<code>setRadius(radius: number): void</code>","text":"<p>Set the circle's radius.</p>"},{"location":"reference/graphics/shapes/#getradius-number","title":"<code>getRadius(): number</code>","text":"<p>Returns the circle's radius.</p>"},{"location":"reference/graphics/shapes/#ellipse","title":"<code>Ellipse</code>","text":"<p><code>Ellipse</code> implements <code>CurveInterface</code>.</p>"},{"location":"reference/graphics/shapes/#constructoroptions-ellipseconstructorinterface","title":"<code>constructor(options: EllipseConstructorInterface)</code>","text":"<p>Creates a new instance of <code>Ellipse</code>.</p>"},{"location":"reference/graphics/shapes/#setradiusoptions-x-number-y-number-void","title":"<code>setRadius(options: {x?: number, y?: number}): void</code>","text":"<p>Set the x radius and the y radius of the ellipse. </p>"},{"location":"reference/graphics/shapes/#getradius-x-number-y-number","title":"<code>getRadius(): {x: number, y: number}</code>","text":"<p>Returns the both radius of the ellipse.</p>"},{"location":"reference/graphics/shapes/#line","title":"<code>Line</code>","text":""},{"location":"reference/graphics/shapes/#constructoroptions-lineconstructorinterface","title":"<code>constructor(options: LineConstructorInterface)</code>","text":"<p>Creates a new instance of <code>Line</code>.</p>"},{"location":"reference/graphics/shapes/#rectangle","title":"<code>Rectangle</code>","text":"<p><code>Rectangle</code> implements <code>ImageHandlingInterface</code>.</p>"},{"location":"reference/graphics/shapes/#constructoroptions-rectangleconstructorinterface","title":"<code>constructor(options: RectangleConstructorInterface)</code>","text":"<p>Creates a new instance of <code>Rectangle</code>.</p>"},{"location":"reference/graphics/shapes/#interfaces","title":"Interfaces","text":""},{"location":"reference/graphics/shapes/#circleconstructorinterface","title":"<code>CircleConstructorInterface</code>","text":"<ul> <li><code>game</code>: Game</li> <li><code>position</code>: Position</li> <li><code>radius</code>: number</li> <li><code>styles</code>: GenericGraphicStylesInterface (optional)</li> <li><code>srcImage</code>: string (optional)</li> <li><code>toDisplay</code>: boolean (optional)</li> <li><code>drawingOptions</code>: CurveDrawingOptionsInterface (optional)</li> </ul>"},{"location":"reference/graphics/shapes/#curvedrawingoptionsinterface","title":"<code>CurveDrawingOptionsInterface</code>","text":"<ul> <li><code>setImage(image: HTMLImageElement): void</code>: Put an image on the circle.</li> <li><code>getImage(): CanvasImageSource | null</code>: Returns the current image of the circle.</li> <li><code>getImageSource(): string | null</code>: Returns the current image source of the circle.</li> </ul>"},{"location":"reference/graphics/shapes/#curveinterface","title":"<code>CurveInterface</code>","text":"<ul> <li><code>setDrawingOptions(options: CurveDrawingOptionsInterface): void</code>: Set the circle's drawing options.</li> <li><code>getDrawingOptions(): CurveDrawingOptionsInterface</code>: Returns the circle's drawing options.</li> </ul>"},{"location":"reference/graphics/shapes/#dimensions","title":"<code>Dimensions</code>","text":"<ul> <li><code>width</code>: number, width of the graphic.</li> <li><code>height</code>: number, height of the graphic.</li> </ul>"},{"location":"reference/graphics/shapes/#ellipseconstructorinterface","title":"<code>EllipseConstructorInterface</code>","text":"<ul> <li><code>game</code>: Game</li> <li><code>position</code>: Position</li> <li><code>radiusX</code>: number</li> <li><code>radiusY</code>: number</li> <li><code>styles</code>: GenericGraphicStylesInterface (optional)</li> <li><code>toDisplay</code>: boolean (optional)</li> <li><code>drawingOptions</code>: CurveDrawingOptionsInterface (optional)</li> </ul>"},{"location":"reference/graphics/shapes/#genericgraphicstylesinterface","title":"<code>GenericGraphicStylesInterface</code>","text":"<ul> <li><code>graphic</code>: GraphicStylesInterface</li> <li><code>line</code>: LineStyleInterface, only for shapes drawn by lines, like Circle, Ellipse or Line.</li> <li><code>text</code>: TextStyleInterface, only for Text</li> </ul>"},{"location":"reference/graphics/shapes/#graphicconstructorinterface","title":"<code>GraphicConstructorInterface</code>","text":"<ul> <li><code>game</code>: Game</li> <li><code>position</code>: Position</li> <li><code>dimensions</code>: Dimensions</li> <li><code>styles</code>: GenericGraphicStylesInterface (optional)</li> <li><code>toDisplay</code>: boolean (optional)</li> </ul>"},{"location":"reference/graphics/shapes/#graphicstylesinterface","title":"<code>GraphicStylesInterface</code>","text":"<ul> <li><code>color</code>: string</li> <li><code>type</code>: 'fill' | 'stroke'</li> </ul>"},{"location":"reference/graphics/shapes/#imagehandlinginterface","title":"<code>ImageHandlingInterface</code>","text":"<ul> <li><code>setImage(image: CanvasImageSource | string): void</code>: set the graphic's image.</li> <li><code>getImage(): CanvasImageSource | null</code>: get the graphic's image.</li> <li><code>getImageSource(): string | null</code>: get the graphic's image's source.</li> </ul>"},{"location":"reference/graphics/shapes/#lineconstructorinterface","title":"<code>LineConstructorInterface</code>","text":"<ul> <li><code>game</code>: Game</li> <li><code>firstPoint</code>: Position</li> <li><code>secondPoint</code>: Position</li> <li><code>styles</code>: GenericGraphicStylesInterface (optional)</li> <li><code>toDisplay</code>: boolean (optional)</li> </ul>"},{"location":"reference/graphics/shapes/#linestyleinterface","title":"<code>LineStyleInterface</code>","text":"<ul> <li><code>width</code>: number (optional)</li> <li><code>cap</code>: \"butt\" | \"round\" | \"square\" (optional)</li> <li><code>join</code>: \"round\" | \"bevel\" | \"miter\" (optional)</li> <li><code>miterLimit</code>: number (optional)</li> <li><code>dash</code>: [number, number] (optional)</li> <li><code>dashOffset</code>: number (optional)</li> </ul>"},{"location":"reference/graphics/shapes/#position","title":"<code>Position</code>","text":"<ul> <li><code>x</code>: number, position on the x-axis.</li> <li><code>y</code>: number, position on the y-axis.</li> </ul>"},{"location":"reference/graphics/shapes/#rectangleconstructorinterface","title":"<code>RectangleConstructorInterface</code>","text":"<ul> <li><code>game</code>: Game</li> <li><code>position</code>: Position</li> <li><code>dimensions</code>: Dimensions</li> <li><code>styles</code>: GenericGraphicStylesInterface (optional)</li> <li><code>srcImage</code>: string (optional)</li> <li><code>toDisplay</code>: boolean (optional)</li> </ul>"},{"location":"reference/graphics/shapes/#textstyleinterface","title":"<code>TextStyleInterface</code>","text":"<ul> <li><code>color</code>: string</li> <li><code>font</code>: string, use it as the CSS property <code>font</code> (optional)</li> <li><code>textAlign</code>: \"start\" | \"end\" | \"left\" | \"right\" | \"center\" (optional)</li> <li><code>textBaseline</code>: \"top\" | \"hanging\" | \"middle\" | \"alphabetic\" | \"ideographic\" | \"bottom\" (optional)</li> <li><code>direction</code>: \"ltr\" | \"rtl\" | \"inherit\" (optional)</li> </ul>"},{"location":"reference/utils/events/","title":"Events","text":""},{"location":"reference/utils/events/#functions","title":"Functions","text":""},{"location":"reference/utils/events/#setkeyboardhandleroptions-setkeyboardhandlerinterface","title":"<code>setKeyboardHandler(options: SetKeyboardHandlerInterface)</code>","text":"<p>Set a keyboard handler.</p>"},{"location":"reference/utils/events/#interfaces","title":"Interfaces","text":""},{"location":"reference/utils/events/#setkeyboardhandlerinterface","title":"<code>SetKeyboardHandlerInterface</code>","text":"<ul> <li><code>on</code>: 'keyup' | 'keydown'</li> <li><code>shortcutCallback</code>: (event: KeyboardEvent) =&gt; boolean</li> <li><code>callback</code>: () =&gt; void</li> </ul>"},{"location":"reference/utils/multimedia/","title":"Multimedia","text":""},{"location":"reference/utils/multimedia/#classes","title":"Classes","text":""},{"location":"reference/utils/multimedia/#multimedia_1","title":"<code>Multimedia</code>","text":"<p><code>Multimedia</code> is the parent class for <code>Audio</code> and for <code>Video</code>.</p>"},{"location":"reference/utils/multimedia/#constructorid-string-media-htmlaudioelement-htmlvideoelement-sources-string-void","title":"<code>constructor(id: string, media: HTMLAudioElement | HTMLVideoElement, sources: string[]): void</code>","text":"<ul> <li><code>id</code>: id of the resource.</li> <li><code>media</code>: HTML element that displays the media on the DOM.</li> <li><code>sources</code>: list of different paths to the medias, could be useful for cross-browser compatibility.</li> </ul>"},{"location":"reference/utils/multimedia/#setsourcessources-string-void","title":"<code>setSources(sources: string[]): void</code>","text":"<p>Update sources.</p>"},{"location":"reference/utils/multimedia/#getsources-string","title":"<code>getSources(): string[]</code>","text":"<p>Returns sources.</p>"},{"location":"reference/utils/multimedia/#play-void","title":"<code>play(): void</code>","text":"<p>Plays the media.</p> <p>Continues from where it left off if paused.</p>"},{"location":"reference/utils/multimedia/#pause-void","title":"<code>pause(): void</code>","text":"<p>Pauses the media.</p>"},{"location":"reference/utils/multimedia/#stop-void","title":"<code>stop(): void</code>","text":"<p>Stops the media.</p> <p>Starts from the beginning if played again.</p>"},{"location":"reference/utils/multimedia/#setvolumevolume-number-void","title":"<code>setVolume(volume: number): void</code>","text":"<p>Set volume.</p>"},{"location":"reference/utils/multimedia/#getvolume-number","title":"<code>getVolume(): number</code>","text":"<p>Returns the current volume.</p>"},{"location":"reference/utils/multimedia/#setlooploop-boolean-void","title":"<code>setLoop(loop: boolean): void</code>","text":"<p>Sets if the media should loop or not.</p>"},{"location":"reference/utils/multimedia/#getloop-boolean","title":"<code>getLoop(): boolean</code>","text":"<p>Returns true if the media is looping, returns false otherwise.</p>"},{"location":"reference/utils/multimedia/#setmutedmuted-boolean-void","title":"<code>setMuted(muted: boolean): void</code>","text":"<p>Sets if the media is muted or not.</p>"},{"location":"reference/utils/multimedia/#getmuted-boolean","title":"<code>getMuted(): boolean</code>","text":"<p>Returns true if the media is muted, false otherwise.</p>"},{"location":"reference/utils/multimedia/#setplaybackrateplaybackrate-number-void","title":"<code>setPlaybackRate(playbackRate: number): void</code>","text":"<p>Sets the playback rate of the media.</p>"},{"location":"reference/utils/multimedia/#getplaybackrate-number","title":"<code>getPlaybackRate(): number</code>","text":"<p>Returns the playback rate of the media.</p>"},{"location":"reference/utils/multimedia/#setpreloadpreload-string-void","title":"<code>setPreload(preload: string): void</code>","text":"<p>Sets the preload method of the media.</p> <p>Nota: <code>preload</code>: \"none\" | \"metadata\" | \"auto\" | \"\"</p>"},{"location":"reference/utils/multimedia/#getpreload-string","title":"<code>getPreload(): string</code>","text":"<p>Returns the preload method of the media.</p> <p>Nota: <code>preload</code> returned: \"none\" | \"metadata\" | \"auto\" | \"\"</p>"},{"location":"reference/utils/multimedia/#setautoplayautoplay-boolean-void","title":"<code>setAutoplay(autoplay: boolean): void</code>","text":"<p>Sets if the media should play automatically or not.</p>"},{"location":"reference/utils/multimedia/#getautoplay-boolean","title":"<code>getAutoplay(): boolean</code>","text":"<p>Returns true if the media is autoplaying, false otherwise.</p>"},{"location":"reference/utils/multimedia/#setcurrenttimecurrenttime-number-void","title":"<code>setCurrentTime(currentTime: number): void</code>","text":"<p>Sets the current time of the media.</p>"},{"location":"reference/utils/multimedia/#getcurrenttime-number","title":"<code>getCurrentTime(): number</code>","text":"<p>Returns the current time of the media.</p>"},{"location":"reference/utils/multimedia/#setdefaultmuteddefaultmuted-boolean-void","title":"<code>setDefaultMuted(defaultMuted: boolean): void</code>","text":"<p>Sets the default muted state of the media.</p>"},{"location":"reference/utils/multimedia/#getdefaultmuted-boolean","title":"<code>getDefaultMuted(): boolean</code>","text":"<p>Returns the default muted state of the media.</p>"},{"location":"reference/utils/multimedia/#setdefaultplaybackratedefaultplaybackrate-number-void","title":"<code>setDefaultPlaybackRate(defaultPlaybackRate: number): void</code>","text":"<p>Sets the default playback rate of the media.</p>"},{"location":"reference/utils/multimedia/#getdefaultplaybackrate-number","title":"<code>getDefaultPlaybackRate(): number</code>","text":"<p>Returns the default playback rate of the media.</p>"},{"location":"reference/utils/multimedia/#setdisableremoteplaybackdisableremoteplayback-boolean-void","title":"<code>setDisableRemotePlayback(disableRemotePlayback: boolean): void</code>","text":"<p>Sets if the media should be prevented from downloading.</p>"},{"location":"reference/utils/multimedia/#getdisableremoteplayback-void","title":"<code>getDisableRemotePlayback(): void</code>","text":"<p>Returns if the media should be prevented from downloading.</p>"},{"location":"reference/utils/multimedia/#getduration-number","title":"<code>getDuration(): number</code>","text":"<p>Returns the duration of the media.</p>"},{"location":"reference/utils/multimedia/#getended-boolean","title":"<code>getEnded(): boolean</code>","text":"<p>Returns true if the media has ended, false otherwise.</p>"},{"location":"reference/utils/multimedia/#geterror-mediaerror-null","title":"<code>getError(): MediaError | null</code>","text":"<p>Verify if an error occurred while loading the media.</p>"},{"location":"reference/utils/multimedia/#audio","title":"<code>Audio</code>","text":"<p><code>Audio</code> extends <code>Multimedia</code>.</p>"},{"location":"reference/utils/multimedia/#constructorsources-string-void","title":"<code>constructor(sources: string[]): void</code>","text":"<p>Sets up the audio player in the DOM.</p>"},{"location":"reference/utils/multimedia/#video","title":"<code>Video</code>","text":"<p><code>Video</code> extends <code>Multimedia</code>.</p>"},{"location":"reference/utils/multimedia/#constructorrectangle-rectangle-sources-string-void","title":"<code>constructor(rectangle: Rectangle, sources: string[]): void</code>","text":"<p>The rectangle needed is necessary to display the images on the canvas. Consider it as a kind of screen.</p> <p>The sources are already described in <code>Multimedia</code> constructor.</p>"},{"location":"reference/utils/popup/","title":"Popup API","text":""},{"location":"reference/utils/popup/#classes","title":"Classes","text":""},{"location":"reference/utils/popup/#popup","title":"<code>Popup</code>","text":""},{"location":"reference/utils/popup/#constructoroptions-popupinterface","title":"<code>constructor(options: PopupInterface)</code>","text":"<p>Constructor of the Popup class. Cf. <code>PopupInterface</code> for more information about arguments.</p> <p>It creates the popup in the DOM.</p>"},{"location":"reference/utils/popup/#async-getresponse-promiseany","title":"<code>async getResponse(): Promise&lt;any&gt;</code>","text":"<p>Get the response of the popup. It could be a boolean or a string depending on the type set (confirm, show or prompt).</p> <p>For prompts: if the input value length doesn't belong to the defined interval ([minLength; maxLength]), the button will be disabled (by default, the interval is [0;255])</p>"},{"location":"reference/utils/popup/#removepopup-void","title":"<code>removePopup(): void</code>","text":"<p>Removes the popup from the DOM.</p>"},{"location":"reference/utils/popup/#setdefaultoptions-void","title":"<code>setDefaultOptions(): void</code>","text":"<p>If some required fields aren't specified, this method sets them with the default values.</p> <ul> <li> <p><code>maxLength</code>: 255</p> </li> <li> <p><code>minLength</code>: 0</p> </li> <li> <p><code>btnText</code>: Confirm</p> </li> <li> <p><code>promptPlaceholder</code>: \"\"</p> </li> </ul>"},{"location":"reference/utils/popup/#getdata-popupinterface","title":"<code>getData(): PopupInterface</code>","text":"<p>Get fields values.</p>"},{"location":"reference/utils/popup/#gethtmlelement-htmlelement","title":"<code>getHtmlElement(): HTMLElement</code>","text":"<p>Get the popup's DOM element.</p>"},{"location":"reference/utils/popup/#functions","title":"Functions","text":"<p>For more information about the <code>IOEventInterface</code> for typing parameters, please see at the \"Interface\" section on this page.</p>"},{"location":"reference/utils/popup/#async-showmsgoptions-ioeventinterface","title":"<code>async showMsg(options: IOEventInterface)</code>","text":"<p>Use it when you want to tell to the user an important message, such as an announcement or an error, for example.</p>"},{"location":"reference/utils/popup/#async-getuserconfirmoptions-ioeventinterface","title":"<code>async getUserConfirm(options: IOEventInterface)</code>","text":"<p>Use it when you want a confirmation from the user to proceed to an action, etc...</p>"},{"location":"reference/utils/popup/#async-getuserinputoptions-ioeventinterface","title":"<code>async getUserInput(options: IOEventInterface)</code>","text":"<p>Use it when you want a text input from a user.</p>"},{"location":"reference/utils/popup/#interfaces","title":"Interfaces","text":""},{"location":"reference/utils/popup/#ioeventinterface","title":"<code>IOEventInterface</code>","text":"<ul> <li> <p><code>title</code>: string</p> </li> <li> <p><code>msg</code>: string</p> </li> <li> <p><code>btnText</code>: string (optional)</p> </li> </ul> <p>Specific for \"prompt\" mode:</p> <ul> <li> <p><code>promptPlaceholder</code>: string (optional)</p> </li> <li> <p><code>maxLength</code>: number (optional)</p> </li> <li> <p><code>minLength</code>: number (optional)</p> </li> </ul>"},{"location":"reference/utils/popup/#popupinterface","title":"<code>PopupInterface</code>","text":"<p><code>PopupInterface</code> extends <code>IOEventInterface</code>.</p> <ul> <li><code>type</code>: \"show\" | \"prompt\" | \"confirm\"</li> </ul>"},{"location":"reference/utils/styles/","title":"Styles","text":"<p>Info</p> <p>For the Graphic styling API methods, please search in the Graphic section of Reference. These are method implemented  on the Graphic classes.</p>"},{"location":"reference/utils/styles/#functions","title":"Functions","text":""},{"location":"reference/utils/styles/#setfillgame-game-rgba-string","title":"<code>setFill(game: Game, rgba: string)</code>","text":"<p>This function sets the drawing color to fill shapes as the <code>rgba</code> param says.</p> <p>Warning</p> <p>You must specify <code>rgba</code> param like this: <code>styles.setFill(game, \"rgba(X,X,X,X)\")</code></p>"},{"location":"reference/utils/styles/#setstrokegame-game-rgba-string","title":"<code>setStroke(game: Game, rgba: string)</code>","text":"<p>Same thing as <code>styles.setFill()</code> but it's for stroke.</p>"},{"location":"reference/utils/styles/#setlinestylegame-game-options-linestyleinterface","title":"<code>setLineStyle(game: Game, options: LineStyleInterface)</code>","text":"<p>Customize the drawing line options.</p>"},{"location":"reference/utils/styles/#settextstylegame-game-options-textstyleinterface","title":"<code>setTextStyle(game: Game, options: TextStyleInterface)</code>","text":"<p>Customize the text drawing options.</p>"},{"location":"utils/","title":"Utils","text":"<p>Warning</p> <p>This part of the website is under construction.</p> <p>Info</p> <p>For popups and others types of events see in the Events part of this website. </p>"},{"location":"utils/fps/","title":"FPS handling","text":"<p>You can decide to set a fix FPS rate:</p> <pre><code>game.setFps(60)\n</code></pre> <p>Note</p> <p>If you set a FPS rate higher than the user's screen refresh rate, Cazan will only draw one frame out of FPS/screen refresh rate (the nearest greater integer of this ratio). </p> <p>But you can decide to adapt your game's FPS rate to the current user's screen refresh rate:</p> <pre><code>game.setFps(await game.getScreenRefreshRate())\n</code></pre>"},{"location":"utils/fps/#reference","title":"Reference","text":"<p>This is the typing of the part of <code>Game</code> about FPS handling.</p> <pre><code>class Game {\n    private fps: number\n    private fpsIncrement: number = 0\n\n    /**\n     * Create an instance of Game.\n     * @param ctx\n     * @param canvas\n     * @param fps Frames per second\n     */\n    constructor(\n        protected ctx: CRenderingContext,\n        protected canvas: HTMLCanvasElement,\n        fps: number = 100\n    ) {}\n\n    setFps(newFps: number): void {}\n\n    getCurrentFps(): number {}\n\n    /**\n     * Returns the user's screen refresh rate.\n     * @return {Promise&lt;number&gt;} fps\n     */\n    async getScreenRefreshRate(): Promise&lt;number&gt; {}\n}\n</code></pre>"}]}